
spring.application.name=achiko-site

# 서버 포트번호 설정
server.port=9905

# Log level ì¤ì ÂÂ
logging.level.root=info

# DB (MySQL) 연동 설정
spring.config.import=optional:file:.env
spring.datasource.url=jdbc:mysql://localhost:3306/achiko?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# ë¡ê·¸ì ì¶ë ¥ëë ì¿¼ë¦¬ í¬ë©íÂÂÂ
# JPAì êµ¬íì²´ì¸ Hibernateê° ëìíë©´ì ë°ìí SQLì ê°ëì±ì ëì¬ì¤ÂÂ
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

# java == > MySQLÃ¬ÂÂ Ã¬Â¿Â¼Ã«Â¦Â¬Ã«Â¬Â¸Ã¬ÂÂ¼Ã«Â¡Â!
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# HikariCP (ê¸°ë³¸ ì»¤ë¥ì POOL) ì¤ì  - (Option)
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000

# Ã¬ÂºÂÃ¬ÂÂ Ã¬ÂÂ¤Ã¬Â Â Ã¬ÂÂ¬Ã«Â¶Â false
spring.thymeleaf.cache=false
spring.thymeleaf.enabled=true
spring.thymeleaf.mode=HTML
spring.thymeleaf.check-template=true
spring.thymeleaf.check-template-location=true

# Ã¬ÂÂÃ«Â¡ÂÃ«ÂÂ Ã¬ÂÂ©Ã«ÂÂ Ã¬ÂÂ¤Ã¬Â Â (default : 1M)
spring.servlet.multipart.max-file-size = 100MB
spring.servlet.multipart.max-request-size = 100MB

# íì¼ ì ì¥ ìì¹ ì¤ì  (ë§¥)
#spring.servlet.multipart.location=/Users/ÃÂ¬ÃÂÃÂ¬ÃÂ¬ÃÂÃÂ©ÃÂ¬ÃÂÃÂÃÂ«ÃÂªÃÂ/uploadPath

# Ã­ÂÂÃ¬ÂÂ´Ã¬Â§ÂÃ¬ÂÂ Ã¬ÂÂÃ­ÂÂ Ã¬ÂÂ¤Ã¬Â Â (Ã­ÂÂÃ¬ÂÂ´Ã¬Â§Â Ã«ÂÂ¹ ÃªÂ¸Â ÃªÂ°Â¯Ã¬ÂÂ)
#user.board.pageLimit=10

# SMTP ì¤ì Â Â
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SMTP_USERNAME}
spring.mail.password=${SMTP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# êµ¬ê¸ registration
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH_SECRET}
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:9905/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email

# ë¤ì´ë² registration
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${NAVER_OAUTH_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_OAUTH_SECRET}
#spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:9905/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email

# ë¤ì´ë² provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# 배포 후 소셜 로그인
spring.security.oauth2.client.registration.google.redirect-uri=https://achiko.site/login/oauth2/code/google
spring.security.oauth2.client.registration.naver.redirect-uri=https://achiko.site/login/oauth2/code/naver
spring.security.oauth2.client.registration.kakao.redirect-uri=https://achiko.site/login/oauth2/code/kakao


# ì¹´ì¹´ì¤ registration
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_OAUTH_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_OAUTH_SECRET}
#spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:9905/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email

# ì¹´ì¹´ì¤ provider
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# 파일 업로드를 저장할 실제 경로
app.upload.dir=C:/myuploads/
# app.upload.dir=/home/ubuntu/uploads/
spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=C:/myuploads/
# spring.servlet.multipart.location=/home/ubuntu/uploads/

# BootPay API Ã¬ÂÂ¤Ã¬Â Â
bootpay.api-url=https://api.bootpay.co.kr
bootpay.api.cancel-url=https://api.bootpay.co.kr/cancel
bootpay.application-id=${BOOTPAY_APPLICATION_ID}
bootpay.private-key=${BOOTPAY_PRIVATE_KEY}

# google map api key
google.api-key=${GOOGLE_API_KEY}

# kakao JavaSccript key
kakao.javascript.key=${KAKAO_JAVASCRIPT_KEY}

# 파일 서빙 설정
spring.resources.static-locations=classpath:/static/, file:///C:/myuploads/
# spring.resources.static-locations=classpath:/static/, file:///home/ubuntu/uploads/

server.forward-headers-strategy=native
server.use-forward-headers=true
# tomcat 원격 IP 헤더
server.tomcat.remote-ip-header=x-forwarded-for
server.tomcat.protocol-header=x-forwarded-proto

# SSL 설정은 하지 말고(=Nginx에서 종결)
server.ssl.enabled=false

# Spring Security 디버그 로그 활성화
logging.level.org.springframework.security=DEBUG

# Spring 웹 관련 로그 활성화 (필요 시)
logging.level.org.springframework.web=DEBUG

logging.level.org.apache.tomcat.util.http.fileupload=DEBUG
logging.level.org.springframework.web.multipart=DEBUG
